"""–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""

from sqlalchemy import create_engine, event
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool
from backend.config import DATABASE_URL
from backend.core.logging import get_logger
import os

logger = get_logger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ë–î
is_sqlite = DATABASE_URL.startswith("sqlite")
is_postgres = DATABASE_URL.startswith("postgresql")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ë–î
if is_sqlite:
    # SQLite –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    engine = create_engine(
        DATABASE_URL,
        connect_args={
            "check_same_thread": False,
            "timeout": 20,
        },
        poolclass=StaticPool,
        echo=False  # –û—Ç–∫–ª—é—á–∞–µ–º SQL –ª–æ–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )

    # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º –¥–ª—è SQLite (–ª—É—á—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
    @event.listens_for(engine, "connect")
    def set_sqlite_pragma(dbapi_connection, connection_record):
        cursor = dbapi_connection.cursor()
        # –í–∫–ª—é—á–∞–µ–º WAL —Ä–µ–∂–∏–º
        cursor.execute("PRAGMA journal_mode=WAL")
        # –í–∫–ª—é—á–∞–µ–º foreign keys
        cursor.execute("PRAGMA foreign_keys=ON")
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º cache —Ä–∞–∑–º–µ—Ä
        cursor.execute("PRAGMA cache_size=10000")
        # –í–∫–ª—é—á–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        cursor.execute("PRAGMA synchronous=NORMAL")
        cursor.close()

elif is_postgres:
    # PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    engine = create_engine(
        DATABASE_URL,
        pool_size=10,
        max_overflow=20,
        pool_pre_ping=True,
        pool_recycle=300,
        echo=False
    )
else:
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ë–î
    engine = create_engine(DATABASE_URL, echo=False)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

def get_db():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ë–î —Å proper error handling"""
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"Database session error: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü)"""
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        logger.info("üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π...")
        from backend.models.user import User, UserRole
        from backend.models.volunteer_profile import VolunteerProfile
        from backend.models.event import Event, EventStatus, EventCategory
        from backend.models.registration import Registration, RegistrationStatus

        logger.info("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)

        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        create_initial_data()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

def create_initial_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    try:
        db = SessionLocal()

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        from backend.models.user import User, UserRole
        from backend.models.event import Event, EventStatus, EventCategory
        from datetime import datetime, timedelta

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        existing_users = db.query(User).count()

        if existing_users == 0:
            logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            admin_user = User(
                telegram_user_id=123456789,
                telegram_username="admin_test",
                first_name="–ê–¥–º–∏–Ω",
                last_name="–°–∏—Å—Ç–µ–º—ã",
                email="admin@volunteer-system.local",
                phone="+7 (999) 111-11-11",
                role=UserRole.ADMIN,
                is_verified=True,
                last_activity=datetime.utcnow()
            )

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
            organizer_user = User(
                telegram_user_id=987654321,
                telegram_username="organizer_test",
                first_name="–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
                last_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                email="organizer@volunteer-system.local",
                phone="+7 (999) 222-22-22",
                role=UserRole.ORGANIZER,
                organization_name="–¢–µ—Å—Ç–æ–≤–∞—è –ù–ö–û",
                org_contact_name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                org_phone="+7 (999) 222-22-22",
                org_email="nko@volunteer-system.local",
                last_activity=datetime.utcnow()
            )

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞
            volunteer_user = User(
                telegram_user_id=111222333,
                telegram_username="volunteer_test",
                first_name="–í–æ–ª–æ–Ω—Ç–µ—Ä",
                last_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                email="volunteer@volunteer-system.local",
                phone="+7 (999) 333-33-33",
                role=UserRole.VOLUNTEER,
                last_activity=datetime.utcnow()
            )

            db.add_all([admin_user, organizer_user, volunteer_user])
            db.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ—Å–ª–µ commit
            db.refresh(organizer_user)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            test_event = Event(
                creator_id=organizer_user.id,
                title="–£–±–æ—Ä–∫–∞ –ø–∞—Ä–∫–∞ ¬´–¢–µ—Å—Ç–æ–≤—ã–π¬ª",
                description="–¢–µ—Å—Ç–æ–≤–æ–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤.",
                short_description="–ü–æ–º–æ–≥–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à –≥–æ—Ä–æ–¥ —á–∏—â–µ!",
                category=EventCategory.ENVIRONMENTAL,
                tags=["—ç–∫–æ–ª–æ–≥–∏—è", "—É–±–æ—Ä–∫–∞", "—Ç–µ—Å—Ç"],
                location="–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∫",
                address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
                start_date=datetime.utcnow() + timedelta(days=7),
                end_date=datetime.utcnow() + timedelta(days=7, hours=6),
                max_volunteers=20,
                min_volunteers=5,
                required_skills=["–§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"],
                what_to_bring="–ü–µ—Ä—á–∞—Ç–∫–∏, —É–¥–æ–±–Ω–∞—è –æ–¥–µ–∂–¥–∞",
                meal_provided=True,
                contact_person="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                contact_phone="+7 (999) 222-22-22",
                status=EventStatus.PUBLISHED,
                published_at=datetime.utcnow()
            )

            db.add(test_event)
            db.commit()

            logger.info("  ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            logger.info(f"    üë§ –ê–¥–º–∏–Ω: admin_test")
            logger.info(f"    üëî –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: organizer_test")
            logger.info(f"    ü§ù –í–æ–ª–æ–Ω—Ç–µ—Ä: volunteer_test")
            logger.info(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {test_event.title}")

        else:
            logger.info(f"  ‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {existing_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

def check_db_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    try:
        db = SessionLocal()
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        db.execute("SELECT 1")
        db.close()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def get_db_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î"""
    try:
        db = SessionLocal()

        info = {
            "database_url": DATABASE_URL.split("://")[0] + "://***",  # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            "is_sqlite": is_sqlite,
            "is_postgres": is_postgres,
        }

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ —ç—Ç–æ SQLite
        if is_sqlite:
            from backend.models.user import User
            from backend.models.event import Event
            from backend.models.registration import Registration

            info.update({
                "users_count": db.query(User).count(),
                "events_count": db.query(Event).count(),
                "registrations_count": db.query(Registration).count(),
            })

        db.close()
        return info

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î: {e}")
        return {"error": str(e)}