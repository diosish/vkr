"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

from fastapi import FastAPI, Request, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.gzip import GZipMiddleware
from contextlib import asynccontextmanager
import time
import uuid
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from backend.config import (
    APP_NAME, APP_VERSION, APP_DESCRIPTION, WEBAPP_URL,
    get_cors_config, get_logging_config, print_config_info,
    FRONTEND_BUILD_DIR, IS_DEVELOPMENT, IS_PRODUCTION
)
from backend.core.logging import setup_logging, get_logger
from backend.database import init_db, check_db_connection, get_db_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logging_config = get_logging_config()
setup_logging(**logging_config)
logger = get_logger(__name__)

# Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è request ID
class RequestIDMiddleware:
    def __init__(self, app):
        self.app = app

    async def __call__(self, scope, receive, send):
        if scope["type"] == "http":
            request_id = str(uuid.uuid4())
            scope["request_id"] = request_id

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ headers –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            async def send_wrapper(message):
                if message["type"] == "http.response.start":
                    headers = list(message.get("headers", []))
                    headers.append([b"x-request-id", request_id.encode()])
                    message["headers"] = headers
                await send(message)

            await self.app(scope, receive, send_wrapper)
        else:
            await self.app(scope, receive, send)

# Lifecycle —Å–æ–±—ã—Ç–∏–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print_config_info()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not check_db_connection():
        logger.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        raise Exception("Database connection failed")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    try:
        init_db()
        db_info = get_db_info()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î: {db_info}")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    if FRONTEND_BUILD_DIR.exists():
        logger.info("‚úÖ Frontend build –Ω–∞–π–¥–µ–Ω")
    else:
        logger.warning("‚ö†Ô∏è Frontend build –Ω–µ –Ω–∞–π–¥–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ API")

    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")

    yield

    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=APP_NAME,
    description=APP_DESCRIPTION,
    version=APP_VERSION,
    lifespan=lifespan,
    docs_url="/docs" if not IS_PRODUCTION else None,
    redoc_url="/redoc" if not IS_PRODUCTION else None
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware
app.add_middleware(GZipMiddleware, minimum_size=1000)
app.add_middleware(RequestIDMiddleware)

# CORS middleware
cors_config = get_cors_config()
app.add_middleware(CORSMiddleware, **cors_config)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    start_time = time.time()
    request_id = getattr(request.scope, "request_id", "unknown")

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(
        f"üì• {request.method} {request.url.path}",
        extra={
            "request_id": request_id,
            "method": request.method,
            "path": request.url.path,
            "query": str(request.query_params),
            "ip": request.client.host if request.client else "unknown"
        }
    )

    try:
        response = await call_next(request)
        process_time = time.time() - start_time

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        logger.info(
            f"üì§ {response.status_code} {request.url.path} ({process_time:.3f}s)",
            extra={
                "request_id": request_id,
                "status_code": response.status_code,
                "process_time": process_time
            }
        )

        return response

    except Exception as e:
        process_time = time.time() - start_time
        logger.error(
            f"üí• 500 {request.url.path} ({process_time:.3f}s): {str(e)}",
            extra={
                "request_id": request_id,
                "error": str(e),
                "process_time": process_time
            },
            exc_info=True
        )
        raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    request_id = getattr(request.scope, "request_id", "unknown")

    logger.warning(
        f"üö´ HTTP {exc.status_code}: {exc.detail}",
        extra={
            "request_id": request_id,
            "status_code": exc.status_code,
            "detail": exc.detail,
            "path": request.url.path
        }
    )

    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code,
            "request_id": request_id
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    request_id = getattr(request.scope, "request_id", "unknown")

    logger.error(
        f"üí• Unhandled error: {str(exc)}",
        extra={
            "request_id": request_id,
            "error_type": type(exc).__name__,
            "path": request.url.path
        },
        exc_info=True
    )

    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error" if IS_PRODUCTION else str(exc),
            "status_code": 500,
            "request_id": request_id
        }
    )

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤
logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤...")

try:
    from backend.api import auth, events, registrations, admin

    app.include_router(auth.router, prefix="/api/auth", tags=["Authentication"])
    app.include_router(events.router, prefix="/api/events", tags=["Events"])
    app.include_router(registrations.router, prefix="/api/registrations", tags=["Registrations"])
    app.include_router(admin.router, prefix="/api/admin", tags=["Admin"])

    logger.info("‚úÖ API —Ä–æ—É—Ç–µ—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")
    raise

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
if FRONTEND_BUILD_DIR.exists():
    app.mount("/static", StaticFiles(directory=FRONTEND_BUILD_DIR / "static"), name="static")
    logger.info("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

# API endpoints
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    db_info = get_db_info()

    return {
        "status": "healthy",
        "service": APP_NAME,
        "version": APP_VERSION,
        "environment": "production" if IS_PRODUCTION else "development",
        "webapp_url": WEBAPP_URL,
        "frontend_available": FRONTEND_BUILD_DIR.exists(),
        "database": db_info,
        "timestamp": time.time()
    }

@app.get("/api/config")
async def get_config():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    return {
        "app_name": APP_NAME,
        "app_version": APP_VERSION,
        "webapp_url": WEBAPP_URL,
        "is_development": IS_DEVELOPMENT,
        "features": {
            "notifications": True,  # –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config
            "file_upload": True,
        }
    }

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint
@app.get("/api/ping")
async def ping():
    """–ü—Ä–æ—Å—Ç–æ–π ping endpoint"""
    return {"message": "pong", "timestamp": time.time()}

# –û—Ç–¥–∞—á–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if FRONTEND_BUILD_DIR.exists():
    @app.get("/{full_path:path}")
    async def serve_frontend(full_path: str):
        """–û—Ç–¥–∞—á–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""

        # –ò—Å–∫–ª—é—á–∞–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã
        if (full_path.startswith("api/") or
            full_path.startswith("docs") or
            full_path.startswith("redoc") or
            full_path.startswith("health") or
            full_path.startswith("static/")):
            raise HTTPException(status_code=404, detail="Not found")

        # –û—Ç–¥–∞–µ–º index.html –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
        index_file = FRONTEND_BUILD_DIR / "index.html"
        if index_file.exists():
            content = index_file.read_text(encoding='utf-8')
            return HTMLResponse(content=content)

        raise HTTPException(status_code=404, detail="Frontend not found")

else:
    # –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ —Å–æ–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º dev —Å—Ç—Ä–∞–Ω–∏—Ü—É
    @app.get("/")
    async def development_page():
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        return HTMLResponse(content=f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <title>{APP_NAME} - Development</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {{ 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                    padding: 40px; 
                    line-height: 1.6; 
                    max-width: 800px;
                    margin: 0 auto;
                }}
                .status {{ 
                    padding: 16px; 
                    border-radius: 8px; 
                    margin: 16px 0; 
                    border-left: 4px solid;
                }}
                .success {{ 
                    background: #d4edda; 
                    color: #155724; 
                    border-color: #28a745;
                }}
                .warning {{ 
                    background: #fff3cd; 
                    color: #856404; 
                    border-color: #ffc107;
                }}
                .info {{
                    background: #d1ecf1;
                    color: #0c5460;
                    border-color: #17a2b8;
                }}
                code {{ 
                    background: #f8f9fa; 
                    padding: 2px 6px; 
                    border-radius: 4px;
                    font-family: 'Monaco', 'Consolas', monospace;
                }}
                .grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 16px;
                    margin: 20px 0;
                }}
                .card {{
                    padding: 16px;
                    border: 1px solid #dee2e6;
                    border-radius: 8px;
                    background: white;
                }}
                a {{ color: #007bff; text-decoration: none; }}
                a:hover {{ text-decoration: underline; }}
            </style>
        </head>
        <body>
            <h1>üöÄ {APP_NAME}</h1>
            <p>–í–µ—Ä—Å–∏—è: <strong>{APP_VERSION}</strong> | –†–µ–∂–∏–º: <strong>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞</strong></p>
            
            <div class="status success">
                <strong>‚úÖ Backend –∑–∞–ø—É—â–µ–Ω</strong><br>
                API —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000
            </div>
            
            <div class="status warning">
                <strong>‚ö†Ô∏è Frontend –Ω–µ —Å–æ–±—Ä–∞–Ω</strong><br>
                –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            </div>
            
            <div class="status info">
                <strong>ü§ñ Telegram Bot</strong><br>
                WebApp URL: <code>{WEBAPP_URL}</code>
            </div>
            
            <h2>üõ†Ô∏è –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</h2>
            <ol>
                <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: <code>cd frontend && npm start</code></li>
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ: <a href="http://localhost:3000">http://localhost:3000</a></li>
            </ol>
            
            <h2>üèóÔ∏è –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:</h2>
            <ol>
                <li>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: <code>cd frontend && npm run build</code></li>
                <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</li>
            </ol>
            
            <h2>üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</h2>
            <div class="grid">
                <div class="card">
                    <h3>üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h3>
                    <a href="/docs">Swagger UI (/docs)</a>
                </div>
                <div class="card">
                    <h3>üìñ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</h3>
                    <a href="/redoc">ReDoc (/redoc)</a>
                </div>
                <div class="card">
                    <h3>üíì –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</h3>
                    <a href="/health">Health Check (/health)</a>
                </div>
                <div class="card">
                    <h3>üèì –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç</h3>
                    <a href="/api/ping">Ping API (/api/ping)</a>
                </div>
            </div>
            
            <hr style="margin: 40px 0;">
            <p style="color: #6c757d; font-size: 14px;">
                üí° <strong>–°–æ–≤–µ—Ç:</strong> –ü–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–º–µ–Ω–∏—Ç—Å—è –Ω–∞ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </p>
        </body>
        </html>
        """)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    from backend.config import API_HOST, API_PORT, DEBUG

    logger.info(f"üåü –ó–∞–ø—É—Å–∫ {APP_NAME} v{APP_VERSION}")

    uvicorn.run(
        "backend.main:app",
        host=API_HOST,
        port=API_PORT,
        reload=DEBUG and IS_DEVELOPMENT,
        log_config=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        access_log=False  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π access log
    )