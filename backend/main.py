"""
–ü–æ–ª–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –æ—Ç–¥–∞—á–µ–π React —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ + –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
"""

from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
from sqlalchemy.orm import Session
from datetime import datetime
from pathlib import Path
import sys

print("=" * 60)
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ú–ü–û–†–¢–û–í")
print("=" * 60)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º backend
try:
    from backend.database import init_db, get_db
    print("‚úÖ database –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå database –û–®–ò–ë–ö–ê: {e}")

try:
    from backend.config import ALLOWED_ORIGINS, WEBAPP_URL, TELEGRAM_BOT_TOKEN
    print("‚úÖ config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå config –û–®–ò–ë–ö–ê: {e}")

try:
    from backend.models.user import User, UserRole
    print("‚úÖ User model –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå User model –û–®–ò–ë–ö–ê: {e}")

try:
    from backend.models.volunteer_profile import VolunteerProfile
    print("‚úÖ VolunteerProfile model –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå VolunteerProfile model –û–®–ò–ë–ö–ê: {e}")

try:
    from backend.models.event import Event, EventStatus, EventCategory
    print("‚úÖ Event model –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå Event model –û–®–ò–ë–ö–ê: {e}")

try:
    from backend.models.registration import Registration, RegistrationStatus
    print("‚úÖ Registration model –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå Registration model –û–®–ò–ë–ö–ê: {e}")

print("=" * 60)
print("üîç –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í")
print("=" * 60)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
files_to_check = [
    "backend/__init__.py",
    "backend/api/__init__.py",
    "backend/api/auth.py",
    "backend/models/__init__.py",
    "backend/services/__init__.py"
]

for file_path in files_to_check:
    if Path(file_path).exists():
        print(f"‚úÖ {file_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print(f"‚ùå {file_path} –ù–ï –ù–ê–ô–î–ï–ù!")

print(f"üìÅ Python path: {sys.path}")
print(f"üìÅ Current working directory: {Path('.').absolute()}")

# –ü—É—Ç—å –∫ —Å–æ–±—Ä–∞–Ω–Ω–æ–º—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
FRONTEND_BUILD = Path("frontend/build")

# Lifecycle —Å–æ–±—ã—Ç–∏–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"üåê Webapp URL: {WEBAPP_URL}")
    print(f"üìÅ Frontend: {'‚úÖ –ù–∞–π–¥–µ–Ω' if FRONTEND_BUILD.exists() else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    init_db()
    create_test_data()
    yield
    # Shutdown
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    db = next(get_db())

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        existing_user = db.query(User).first()
        if existing_user:
            print("  ‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            db.close()
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        admin_user = User(
            telegram_user_id=123456789,
            telegram_username="admin_test",
            first_name="–ê–¥–º–∏–Ω",
            last_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            email="admin@test.com",
            phone="+7 (999) 111-11-11",
            role=UserRole.ADMIN
        )

        organizer_user = User(
            telegram_user_id=987654321,
            telegram_username="organizer_test",
            first_name="–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
            last_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            email="organizer@test.com",
            phone="+7 (999) 222-22-22",
            role=UserRole.ORGANIZER
        )

        volunteer_user = User(
            telegram_user_id=111222333,
            telegram_username="volunteer_test",
            first_name="–í–æ–ª–æ–Ω—Ç–µ—Ä",
            last_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            email="volunteer@test.com",
            phone="+7 (999) 333-33-33",
            role=UserRole.VOLUNTEER
        )

        db.add_all([admin_user, organizer_user, volunteer_user])
        db.commit()
        db.refresh(organizer_user)
        db.refresh(volunteer_user)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        events_data = [
            {
                "creator_id": organizer_user.id,
                "title": "–£–±–æ—Ä–∫–∞ –ø–∞—Ä–∫–∞",
                "description": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–∫—Ü–∏—è –ø–æ —É–±–æ—Ä–∫–µ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –ø–∞—Ä–∫–∞. –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤—Å–µ—Ö –Ω–µ—Ä–∞–≤–Ω–æ–¥—É—à–Ω—ã—Ö –≥—Ä–∞–∂–¥–∞–Ω –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —É–ª—É—á—à–µ–Ω–∏–∏ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞.",
                "short_description": "–ü–æ–º–æ–≥–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à –≥–æ—Ä–æ–¥ —á–∏—â–µ!",
                "category": EventCategory.ENVIRONMENTAL,
                "tags": ["—ç–∫–æ–ª–æ–≥–∏—è", "—É–±–æ—Ä–∫–∞", "–ø–∞—Ä–∫", "–ø—Ä–∏—Ä–æ–¥–∞"],
                "location": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫",
                "address": "—É–ª. –ü–∞—Ä–∫–æ–≤–∞—è, 1",
                "start_date": datetime(2024, 12, 15, 10, 0),
                "end_date": datetime(2024, 12, 15, 16, 0),
                "max_volunteers": 20,
                "required_skills": ["–§–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å"],
                "what_to_bring": "–ü–µ—Ä—á–∞—Ç–∫–∏, —É–¥–æ–±–Ω–∞—è –æ–¥–µ–∂–¥–∞, –ø–∏—Ç—å–µ–≤–∞—è –≤–æ–¥–∞",
                "meal_provided": True,
                "contact_person": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
                "contact_phone": "+7 (999) 222-22-22",
                "status": EventStatus.PUBLISHED,
                "published_at": datetime.utcnow()
            },
            {
                "creator_id": organizer_user.id,
                "title": "–ü–æ–º–æ—â—å –≤ –¥–µ—Ç—Å–∫–æ–º –¥–æ–º–µ",
                "description": "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –∏ –∏–≥—Ä –¥–ª—è –¥–µ—Ç–µ–π –≤ –¥–µ—Ç—Å–∫–æ–º –¥–æ–º–µ. –ü–æ–¥–∞—Ä–∏—Ç–µ –¥–µ—Ç—è–º —Ä–∞–¥–æ—Å—Ç—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –æ–±—â–µ–Ω–∏—è!",
                "short_description": "–ü–æ–¥–∞—Ä–∏—Ç–µ –¥–µ—Ç—è–º —Ä–∞–¥–æ—Å—Ç—å —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞!",
                "category": EventCategory.SOCIAL,
                "tags": ["–¥–µ—Ç–∏", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–ø–æ–º–æ—â—å"],
                "location": "–î–µ—Ç—Å–∫–∏–π –¥–æ–º ‚Ññ5",
                "address": "—É–ª. –î–µ—Ç—Å–∫–∞—è, 10",
                "start_date": datetime(2024, 12, 20, 14, 0),
                "end_date": datetime(2024, 12, 20, 18, 0),
                "max_volunteers": 10,
                "required_skills": ["–†–∞–±–æ—Ç–∞ —Å –¥–µ—Ç—å–º–∏", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏"],
                "what_to_bring": "–•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                "meal_provided": False,
                "contact_person": "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞",
                "contact_phone": "+7 (999) 333-33-33",
                "status": EventStatus.PUBLISHED,
                "published_at": datetime.utcnow()
            }
        ]

        for event_data in events_data:
            event = Event(**event_data)
            db.add(event)

        db.commit()

        print("  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:")
        print(f"    üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: 3")
        print(f"    üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {len(events_data)}")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Volunteer Registration System",
    description="–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è Telegram",
    version="2.0.0",
    lifespan=lifespan
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

print("=" * 60)
print("üîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï API –†–û–£–¢–ï–†–û–í")
print("=" * 60)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
try:
    print("üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ backend.api.auth...")
    from backend.api.auth import router as auth_router
    app.include_router(auth_router, prefix="/api/auth", tags=["Authentication"])
    print("‚úÖ Auth API –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
except ImportError as e:
    print(f"‚ùå Auth API –ù–ï –ù–ê–ô–î–ï–ù: {e}")
    print("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/api/auth.py")
except Exception as e:
    print(f"‚ùå Auth API –û–®–ò–ë–ö–ê: {e}")

try:
    from backend.api.events import router as events_router
    app.include_router(events_router, prefix="/api/events", tags=["Events"])
    print("‚úÖ Events API –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    print(f"‚ö†Ô∏è Events API –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
except Exception as e:
    print(f"‚ùå Events API –æ—à–∏–±–∫–∞: {e}")

try:
    from backend.api.registrations import router as registrations_router
    app.include_router(registrations_router, prefix="/api/registrations", tags=["Registrations"])
    print("‚úÖ Registrations API –ø–æ–¥–∫–ª—é—á–µ–Ω")
except ImportError as e:
    print(f"‚ö†Ô∏è Registrations API –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
except Exception as e:
    print(f"‚ùå Registrations API –æ—à–∏–±–∫–∞: {e}")

print("=" * 60)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
if FRONTEND_BUILD.exists():
    app.mount("/static", StaticFiles(directory=FRONTEND_BUILD / "static"), name="static")

# API Routes
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    return {
        "status": "healthy",
        "service": "volunteer-registration-system",
        "version": "2.0.0",
        "webapp_url": WEBAPP_URL,
        "bot_configured": bool(TELEGRAM_BOT_TOKEN),
        "frontend": FRONTEND_BUILD.exists()
    }

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.post("/api/test-auth")
async def test_auth():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return {
        "success": True,
        "message": "Test auth endpoint works!",
        "user": {
            "id": 1,
            "first_name": "–¢–µ—Å—Ç",
            "role": "volunteer"
        }
    }

# –û—Ç–¥–∞—á–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
if FRONTEND_BUILD.exists():
    @app.get("/{full_path:path}")
    async def serve_frontend(full_path: str):
        """–û—Ç–¥–∞—á–∞ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ò—Å–∫–ª—é—á–∞–µ–º API –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        if (full_path.startswith("api/") or
            full_path.startswith("docs") or
            full_path.startswith("health") or
            full_path.startswith("static/") or
            full_path.startswith("test/")):
            raise HTTPException(status_code=404, detail="Not found")

        index_file = FRONTEND_BUILD / "index.html"
        if index_file.exists():
            return HTMLResponse(content=index_file.read_text(encoding='utf-8'))

        raise HTTPException(status_code=404, detail="Frontend not found")
else:
    # –ï—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ —Å–æ–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    @app.get("/")
    async def root():
        return HTMLResponse(content=f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Volunteer System - Development</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {{ font-family: system-ui; padding: 20px; line-height: 1.6; }}
                .container {{ max-width: 600px; margin: 0 auto; }}
                .status {{ padding: 15px; border-radius: 8px; margin: 15px 0; }}
                .success {{ background: #d4edda; color: #155724; }}
                .warning {{ background: #fff3cd; color: #856404; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ Volunteer Registration System</h1>
                
                <div class="status success">
                    <strong>Backend:</strong> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 8000
                </div>
                
                <div class="status warning">
                    <strong>Frontend:</strong> ‚ö†Ô∏è –ù–µ —Å–æ–±—Ä–∞–Ω
                </div>
                
                <h2>–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</h2>
                <ol>
                    <li>–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: <code>cd frontend && npm start</code></li>
                    <li>–û—Ç–∫—Ä–æ–π—Ç–µ: <a href="http://localhost:3000">http://localhost:3000</a></li>
                </ol>
                
                <h2>–î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:</h2>
                <ol>
                    <li>–°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: <code>cd frontend && npm run build</code></li>
                    <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</li>
                </ol>
                
                <h2>API:</h2>
                <ul>
                    <li><a href="/docs">üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a></li>
                    <li><a href="/health">üîç –ó–¥–æ—Ä–æ–≤—å–µ</a></li>
                    <li><a href="/api/test-auth">üß™ –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</a></li>
                </ul>
                
                <p><strong>WebApp URL:</strong> {WEBAPP_URL}</p>
            </div>
        </body>
        </html>
        """)

print("üéØ Main.py –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
print("=" * 60)