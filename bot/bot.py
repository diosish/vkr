"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Bot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import logging
import asyncio
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://0a02-62-197-45-18.ngrok-free.app")

print(f"ü§ñ Bot Token: {'‚úÖ Set' if TELEGRAM_BOT_TOKEN else '‚ùå Not Set'}")
print(f"üåê WebApp URL: {WEBAPP_URL}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App
    webapp = WebAppInfo(url=WEBAPP_URL)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=webapp)],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("üîç –¢–µ—Å—Ç API", callback_data="test_api")]
    ])

    welcome_text = f"""
ü§ù *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è:
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏  
- –ó–∞–ø–∏—Å–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö

*–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*
üåê WebApp URL: `{WEBAPP_URL}`
üîß –†–µ–∂–∏–º: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞

–ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è –Ω–∞—á–∞–ª–∞!
    """

    await update.message.reply_text(
        welcome_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üìã *–ü–æ–º–æ—â—å –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
/webapp - –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

*–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:*
üîß API: `https://0a02-62-197-45-18.ngrok-free.app/docs`
üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite (–ª–æ–∫–∞–ª—å–Ω–∞—è)
üåê Frontend: React (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ :3000)

*–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:*
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞
    """

    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    import aiohttp

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{WEBAPP_URL}/health") as response:
                if response.status == 200:
                    data = await response.json()
                    status_text = f"""
‚úÖ *–°–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç*

üåê API: {WEBAPP_URL}
üìä –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}
ü§ñ Bot: {'‚úÖ' if data.get('bot_configured') else '‚ùå'}

*–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* {context.bot.username}
                    """
                else:
                    status_text = f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status})"
    except Exception as e:
        status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

    await update.message.reply_text(status_text, parse_mode='Markdown')

async def webapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Web App"""
    webapp = WebAppInfo(url=WEBAPP_URL)
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å", web_app=webapp)]
    ])

    await update.message.reply_text(
        f"üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n`{WEBAPP_URL}`",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return

    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"üåê WebApp URL: {WEBAPP_URL}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("webapp", webapp_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()