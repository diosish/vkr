// frontend/src/App.jsx
import React, { useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Layout from './components/Layout';
import RegistrationForm from './components/RegistrationForm';
import HomePage from './pages/HomePage';
import ProfilePage from './pages/ProfilePage';
import EventsPage from './pages/EventsPage';
import EventDetailsPage from './pages/EventDetailsPage';
import MyRegistrationsPage from './pages/MyRegistrationsPage';
import CreateEventPage from './pages/CreateEventPage';
import LoadingSpinner from './components/LoadingSpinner';
import useTelegram from './hooks/useTelegram';
import './App.css';

// API functions
const verifyTelegramAuth = async (initData) => {
  try {
    const response = await fetch('/api/auth/verify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Telegram-Init-Data': initData
      }
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.detail || 'Authentication failed');
    }

    return await response.json();
  } catch (error) {
    console.error('Auth error:', error);
    throw error;
  }
};

const getCurrentUser = async (initData) => {
  try {
    const response = await fetch('/api/auth/me', {
      headers: {
        'X-Telegram-Init-Data': initData
      }
    });

    if (!response.ok) {
      throw new Error('Failed to get user info');
    }

    return await response.json();
  } catch (error) {
    console.error('Get user error:', error);
    throw error;
  }
};

function App() {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showRegistration, setShowRegistration] = useState(false);
  const [registrationStep, setRegistrationStep] = useState('welcome');

  const { tg, showAlert, isSupported } = useTelegram();

  useEffect(() => {
    if (isSupported) {
      authenticateUser();
    } else {
      // –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ Telegram
      setUser({
        id: 1,
        first_name: '–¢–µ—Å—Ç',
        last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        role: 'volunteer',
        display_name: '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        profile_completed: false,
        completion_percentage: 30
      });
      setLoading(false);
    }
  }, [isSupported, tg]);

  const authenticateUser = async () => {
    try {
      setLoading(true);

      if (tg?.initData) {
        // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ API
        const authResponse = await verifyTelegramAuth(tg.initData);

        if (authResponse.success) {
          setUser(authResponse.user);

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          if (authResponse.is_new_user) {
            showAlert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${authResponse.user.first_name}! üéâ`);
            setShowRegistration(true);
            setRegistrationStep('welcome');
          } else if (authResponse.requires_registration) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
            setShowRegistration(true);
            setRegistrationStep('form');
          }
        } else {
          throw new Error('Authentication failed');
        }
      } else {
        throw new Error('No Telegram data available');
      }
    } catch (err) {
      console.error('Authentication error:', err);
      setError('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleRegistrationComplete = async (userData) => {
    setUser(userData);
    setShowRegistration(false);
    setRegistrationStep('welcome');

    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const updatedUser = await getCurrentUser(tg?.initData);
      setUser(updatedUser);
    } catch (error) {
      console.error('Failed to reload user data:', error);
    }
  };

  const handleSkipRegistration = () => {
    setShowRegistration(false);
    setRegistrationStep('welcome');
  };

  const startRegistration = () => {
    setShowRegistration(true);
    setRegistrationStep('form');
  };

  // Loading screen
  if (loading) {
    return <LoadingSpinner message="–ó–∞–≥—Ä—É–∑–∫–∞..." />;
  }

  // Error screen
  if (error) {
    return (
      <div className="error-screen">
        <h2>‚ùå –û—à–∏–±–∫–∞</h2>
        <p>{error}</p>
        <button onClick={() => window.location.reload()} className="btn btn-primary">
          üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    );
  }

  // No user
  if (!user) {
    return (
      <div className="error-screen">
        <h2>üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h2>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</p>
        <button onClick={authenticateUser} className="btn btn-primary">
          üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  // Registration flow
  if (showRegistration) {
    if (registrationStep === 'welcome') {
      return (
        <div className="registration-welcome">
          <div className="welcome-icon">ü§ù</div>
          <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤!</h2>
          <p>
            –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö
            –Ω–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–π–º–µ—Ç
            –≤—Å–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
          </p>

          {user.completion_percentage > 0 && (
            <div className="profile-completion">
              <div className="completion-header">
                <span>–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω:</span>
                <span className="completion-percentage">{user.completion_percentage}%</span>
              </div>
              <div className="completion-bar">
                <div
                  className="completion-fill"
                  style={{ width: `${user.completion_percentage}%` }}
                />
              </div>
            </div>
          )}

          <div style={{ display: 'flex', gap: '12px', justifyContent: 'center' }}>
            <button onClick={startRegistration} className="btn btn-primary">
              {user.completion_percentage > 0 ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ' : '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'}
            </button>
            <button onClick={handleSkipRegistration} className="btn btn-outline">
              –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–∫–∞
            </button>
          </div>
        </div>
      );
    }

    return (
      <RegistrationForm
        user={user}
        onComplete={handleRegistrationComplete}
        onSkip={handleSkipRegistration}
      />
    );
  }

  // Main app
  return (
    <div className="app">
      <Router>
        <Layout user={user}>
          <Routes>
            <Route path="/" element={<HomePage user={user} />} />
            <Route path="/profile" element={<ProfilePage user={user} setUser={setUser} />} />
            <Route path="/events" element={<EventsPage user={user} />} />
            <Route path="/events/:id" element={<EventDetailsPage user={user} />} />

            {/* –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ */}
            {user.role === 'volunteer' && (
              <Route path="/my-registrations" element={<MyRegistrationsPage user={user} />} />
            )}

            {/* –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤ */}
            {(user.role === 'organizer' || user.role === 'admin') && (
              <Route path="/create-event" element={<CreateEventPage user={user} />} />
            )}

            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>
        </Layout>
      </Router>
    </div>
  );
}

export default App;