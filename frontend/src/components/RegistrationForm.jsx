// frontend/src/components/RegistrationForm.jsx
import React, { useState } from 'react';
import { User, Phone, Mail, Calendar, MapPin, Briefcase, Heart, Globe } from 'lucide-react';
import useTelegram from '../hooks/useTelegram';

const RegistrationForm = ({ user, onComplete, onSkip }) => {
  const [formData, setFormData] = useState({
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    email: '',
    phone: '',
    bio: '',
    location: '',

    // –ü—Ä–æ—Ñ–∏–ª—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞
    middle_name: '',
    birth_date: '',
    gender: '',

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    emergency_contact_name: '',
    emergency_contact_phone: '',
    emergency_contact_relation: '',

    // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    education: '',
    occupation: '',
    organization: '',

    // –ù–∞–≤—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
    skills: [],
    interests: [],
    languages: ['ru'],
    experience_description: '',

    // –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    travel_willingness: false,
    max_travel_distance: 50,
    preferred_activities: []
  });

  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const { showAlert } = useTelegram();

  const steps = [
    { id: 1, title: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', icon: User },
    { id: 2, title: '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', icon: Calendar },
    { id: 3, title: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã', icon: Phone },
    { id: 4, title: '–û–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏', icon: Briefcase },
    { id: 5, title: '–ò–Ω—Ç–µ—Ä–µ—Å—ã', icon: Heart }
  ];

  const skillsOptions = [
    '–†–∞–±–æ—Ç–∞ —Å –¥–µ—Ç—å–º–∏', '–†–∞–±–æ—Ç–∞ —Å –ø–æ–∂–∏–ª—ã–º–∏', '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏', '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ü–µ—Ä–µ–≤–æ–¥—ã',
    '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–í–∏–¥–µ–æ—Å—ä–µ–º–∫–∞', '–î–∏–∑–∞–π–Ω', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ö—É–ª–∏–Ω–∞—Ä–∏—è', '–í–æ–∂–¥–µ–Ω–∏–µ',
    '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏', '–ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏'
  ];

  const interestsOptions = [
    '–≠–∫–æ–ª–æ–≥–∏—è', '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–ö—É–ª—å—Ç—É—Ä–∞',
    '–°–ø–æ—Ä—Ç', '–ñ–∏–≤–æ—Ç–Ω—ã–µ', '–ü–æ–∂–∏–ª—ã–µ –ª—é–¥–∏', '–î–µ—Ç–∏', '–õ—é–¥–∏ —Å –û–í–ó', '–ë–µ–∑–¥–æ–º–Ω—ã–µ',
    '–ë–µ–∂–µ–Ω—Ü—ã', '–ü—Ä–∏—Ä–æ–¥–∞', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ù–∞—É–∫–∞'
  ];

  const preferredActivitiesOptions = [
    '–†–∞–∑–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø–æ–º–æ—â—å', '–í—ã–µ–∑–¥–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    '–§–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞', '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    '–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏', '–ü—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è', '–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
  ];

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: null }));
    }
  };

  const handleMultiSelect = (name, value) => {
    setFormData(prev => ({
      ...prev,
      [name]: prev[name].includes(value)
        ? prev[name].filter(item => item !== value)
        : [...prev[name], value]
    }));
  };

  const validateStep = (step) => {
    const newErrors = {};

    switch (step) {
      case 1:
        if (!formData.email.trim()) {
          newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
          newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        }
        if (!formData.phone.trim()) {
          newErrors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        }
        break;
      case 2:
        if (!formData.birth_date) {
          newErrors.birth_date = '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
        }
        break;
      case 3:
        if (!formData.emergency_contact_name.trim()) {
          newErrors.emergency_contact_name = '–ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        }
        if (!formData.emergency_contact_phone.trim()) {
          newErrors.emergency_contact_phone = '–¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        }
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleNext = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, steps.length));
    }
  };

  const handlePrev = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const handleSubmit = async () => {
    if (!validateStep(currentStep)) return;

    setLoading(true);

    try {
      const response = await fetch('/api/auth/complete-registration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Telegram-Init-Data': window.Telegram?.WebApp?.initData || ''
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.detail || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }

      const userData = await response.json();
      showAlert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üéâ');
      onComplete(userData);

    } catch (error) {
      showAlert('–û—à–∏–±–∫–∞: ' + error.message);
      setErrors({ general: error.message });
    } finally {
      setLoading(false);
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="step-content">
            <h3 className="mb-4">üìß –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>

            <div className="form-group">
              <label htmlFor="email">Email *</label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleChange}
                className={`form-control ${errors.email ? 'error' : ''}`}
                placeholder="your@example.com"
              />
              {errors.email && <span className="error-text">{errors.email}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleChange}
                className={`form-control ${errors.phone ? 'error' : ''}`}
                placeholder="+7 (XXX) XXX-XX-XX"
              />
              {errors.phone && <span className="error-text">{errors.phone}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="location">–ì–æ—Ä–æ–¥</label>
              <input
                type="text"
                id="location"
                name="location"
                value={formData.location}
                onChange={handleChange}
                className="form-control"
                placeholder="–í–∞—à –≥–æ—Ä–æ–¥"
              />
            </div>

            <div className="form-group">
              <label htmlFor="bio">–û —Å–µ–±–µ</label>
              <textarea
                id="bio"
                name="bio"
                value={formData.bio}
                onChange={handleChange}
                className="form-control"
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                rows="3"
              />
            </div>
          </div>
        );

      case 2:
        return (
          <div className="step-content">
            <h3 className="mb-4">üë§ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>

            <div className="form-group">
              <label htmlFor="middle_name">–û—Ç—á–µ—Å—Ç–≤–æ</label>
              <input
                type="text"
                id="middle_name"
                name="middle_name"
                value={formData.middle_name}
                onChange={handleChange}
                className="form-control"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ"
              />
            </div>

            <div className="form-group">
              <label htmlFor="birth_date">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è *</label>
              <input
                type="date"
                id="birth_date"
                name="birth_date"
                value={formData.birth_date}
                onChange={handleChange}
                className={`form-control ${errors.birth_date ? 'error' : ''}`}
              />
              {errors.birth_date && <span className="error-text">{errors.birth_date}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="gender">–ü–æ–ª</label>
              <select
                id="gender"
                name="gender"
                value={formData.gender}
                onChange={handleChange}
                className="form-control"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ</option>
                <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                <option value="other">–î—Ä—É–≥–æ–π</option>
              </select>
            </div>

            <div className="form-group">
              <label htmlFor="education">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</label>
              <input
                type="text"
                id="education"
                name="education"
                value={formData.education}
                onChange={handleChange}
                className="form-control"
                placeholder="–í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
              />
            </div>

            <div className="form-group">
              <label htmlFor="occupation">–ü—Ä–æ—Ñ–µ—Å—Å–∏—è</label>
              <input
                type="text"
                id="occupation"
                name="occupation"
                value={formData.occupation}
                onChange={handleChange}
                className="form-control"
                placeholder="–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å"
              />
            </div>
          </div>
        );

      case 3:
        return (
          <div className="step-content">
            <h3 className="mb-4">üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h3>

            <div className="form-group">
              <label htmlFor="emergency_contact_name">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ *</label>
              <input
                type="text"
                id="emergency_contact_name"
                name="emergency_contact_name"
                value={formData.emergency_contact_name}
                onChange={handleChange}
                className={`form-control ${errors.emergency_contact_name ? 'error' : ''}`}
                placeholder="–§–ò–û –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞"
              />
              {errors.emergency_contact_name && <span className="error-text">{errors.emergency_contact_name}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="emergency_contact_phone">–¢–µ–ª–µ—Ñ–æ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞ *</label>
              <input
                type="tel"
                id="emergency_contact_phone"
                name="emergency_contact_phone"
                value={formData.emergency_contact_phone}
                onChange={handleChange}
                className={`form-control ${errors.emergency_contact_phone ? 'error' : ''}`}
                placeholder="+7 (XXX) XXX-XX-XX"
              />
              {errors.emergency_contact_phone && <span className="error-text">{errors.emergency_contact_phone}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="emergency_contact_relation">–°—Ç–µ–ø–µ–Ω—å —Ä–æ–¥—Å—Ç–≤–∞</label>
              <select
                id="emergency_contact_relation"
                name="emergency_contact_relation"
                value={formData.emergency_contact_relation}
                onChange={handleChange}
                className="form-control"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ</option>
                <option value="parent">–†–æ–¥–∏—Ç–µ–ª—å</option>
                <option value="spouse">–°—É–ø—Ä—É–≥(–∞)</option>
                <option value="sibling">–ë—Ä–∞—Ç/–°–µ—Å—Ç—Ä–∞</option>
                <option value="child">–†–µ–±–µ–Ω–æ–∫</option>
                <option value="friend">–î—Ä—É–≥</option>
                <option value="relative">–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫</option>
                <option value="other">–î—Ä—É–≥–æ–µ</option>
              </select>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="step-content">
            <h3 className="mb-4">üíº –û–ø—ã—Ç –∏ –Ω–∞–≤—ã–∫–∏</h3>

            <div className="form-group">
              <label>–ù–∞–≤—ã–∫–∏</label>
              <div className="skills-grid">
                {skillsOptions.map(skill => (
                  <label key={skill} className="skill-checkbox">
                    <input
                      type="checkbox"
                      checked={formData.skills.includes(skill)}
                      onChange={() => handleMultiSelect('skills', skill)}
                    />
                    <span>{skill}</span>
                  </label>
                ))}
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="experience_description">–û–ø—ã—Ç –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–∞</label>
              <textarea
                id="experience_description"
                name="experience_description"
                value={formData.experience_description}
                onChange={handleChange}
                className="form-control"
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã..."
                rows="4"
              />
            </div>

            <div className="form-group">
              <label>
                <input
                  type="checkbox"
                  name="travel_willingness"
                  checked={formData.travel_willingness}
                  onChange={handleChange}
                />
                –ì–æ—Ç–æ–≤(–∞) –∫ –≤—ã–µ–∑–¥–Ω—ã–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
              </label>
            </div>

            {formData.travel_willingness && (
              <div className="form-group">
                <label htmlFor="max_travel_distance">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∫–º)</label>
                <input
                  type="number"
                  id="max_travel_distance"
                  name="max_travel_distance"
                  value={formData.max_travel_distance}
                  onChange={handleChange}
                  className="form-control"
                  min="1"
                  max="1000"
                />
              </div>
            )}
          </div>
        );

      case 5:
        return (
          <div className="step-content">
            <h3 className="mb-4">‚ù§Ô∏è –ò–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</h3>

            <div className="form-group">
              <label>–û–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤</label>
              <div className="interests-grid">
                {interestsOptions.map(interest => (
                  <label key={interest} className="interest-checkbox">
                    <input
                      type="checkbox"
                      checked={formData.interests.includes(interest)}
                      onChange={() => handleMultiSelect('interests', interest)}
                    />
                    <span>{interest}</span>
                  </label>
                ))}
              </div>
            </div>

            <div className="form-group">
              <label>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</label>
              <div className="activities-grid">
                {preferredActivitiesOptions.map(activity => (
                  <label key={activity} className="activity-checkbox">
                    <input
                      type="checkbox"
                      checked={formData.preferred_activities.includes(activity)}
                      onChange={() => handleMultiSelect('preferred_activities', activity)}
                    />
                    <span>{activity}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="registration-form">
      {/* Progress Bar */}
      <div className="progress-section mb-4">
        <div className="steps-indicator">
          {steps.map(step => (
            <div
              key={step.id}
              className={`step-indicator ${currentStep >= step.id ? 'active' : ''} ${currentStep === step.id ? 'current' : ''}`}
            >
              <div className="step-number">{step.id}</div>
              <div className="step-title">{step.title}</div>
            </div>
          ))}
        </div>
        <div className="progress-bar">
          <div
            className="progress-fill"
            style={{ width: `${(currentStep / steps.length) * 100}%` }}
          />
        </div>
      </div>

      {/* Step Content */}
      <div className="form-container">
        {renderStep()}

        {errors.general && (
          <div className="error-message mb-4">
            {errors.general}
          </div>
        )}

        {/* Navigation Buttons */}
        <div className="form-buttons">
          <div className="buttons-left">
            {currentStep > 1 && (
              <button
                type="button"
                onClick={handlePrev}
                className="btn btn-secondary"
                disabled={loading}
              >
                ‚Üê  –ù–∞–∑–∞–¥
              </button>
            )}
          </div>

          <div className="buttons-right">
            {onSkip && currentStep === 1 && (
              <button
                type="button"
                onClick={onSkip}
                className="btn btn-outline"
                disabled={loading}
              >
                –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
              </button>
            )}

            {currentStep < steps.length ? (
              <button
                type="button"
                onClick={handleNext}
                className="btn btn-primary"
                disabled={loading}
              >
                –î–∞–ª–µ–µ ‚Üí
              </button>
            ) : (
              <button
                type="button"
                onClick={handleSubmit}
                className="btn btn-primary"
                disabled={loading}
              >
                {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default RegistrationForm;